// This is the service worker for the PWA
// It's automatically generated, but we're adding some custom code
import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { NetworkFirst, CacheFirst, StaleWhileRevalidate } from 'workbox-strategies';

// Claim any currently available client once the service worker becomes active
clientsClaim();

// List of critical routes we want to precache for offline use
const CRITICAL_ROUTES = [
    '/',
    '/pokedex',
    '/favorites',
    '/pwa-test',
    '/login',
    '/register',
    '/offline'
];

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
    // Return false to exempt requests from being fulfilled by index.html.
    ({ url }) => {
        // If this is a URL that starts with /_, skip.
        if (url.pathname.startsWith('/_')) {
            return false;
        }
        // If this looks like a URL for a resource, because it contains
        // a file extension, skip.
        if (url.pathname.match(fileExtensionRegexp)) {
            return false;
        }
        // Return true to signal that we want to use the handler.
        return true;
    },
    createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Custom code for offline page
const offlineFallbackPage = '/offline';

// Precache critical app routes during install
self.addEventListener('install', (event) => {
    const precacheUrls = CRITICAL_ROUTES.map(url => new Request(url, { mode: 'navigate' }));

    event.waitUntil(
        caches.open('pages-cache').then(cache => {
            return Promise.all(
                precacheUrls.map(request =>
                    fetch(request)
                        .then(response => {
                            if (!response.ok) throw new Error(`Failed to fetch ${request.url}`);
                            return cache.put(request, response);
                        })
                        .catch(err => console.warn(`Failed to precache ${request.url}:`, err))
                )
            );
        })
    );
});

// Use StaleWhileRevalidate for HTML navigation - this gives a good balance
// between speed (serving from cache) and freshness (updating the cache)
registerRoute(
    ({ request }) => request.mode === 'navigate',
    new StaleWhileRevalidate({
        cacheName: 'pages-cache',
        plugins: [
            new ExpirationPlugin({
                maxEntries: 50,
                maxAgeSeconds: 60 * 60 * 24 * 7, // 1 week
            }),
        ],
    })
);

// Fallback to offline page if the StaleWhileRevalidate strategy fails
self.addEventListener('fetch', (event) => {
    // Only handle navigate requests
    if (event.request.mode === 'navigate') {
        event.respondWith(
            fetch(event.request)
                .catch(() => {
                    return caches.match(offlineFallbackPage);
                })
        );
    }
});

// Cache images with a Cache First strategy
registerRoute(
    ({ request }) => request.destination === 'image',
    new CacheFirst({
        cacheName: 'image-cache',
        plugins: [
            new ExpirationPlugin({
                maxEntries: 100,
                maxAgeSeconds: 60 * 60 * 24 * 30, // 30 days
            }),
        ],
    })
);

// Cache API requests with Network First
registerRoute(
    ({ url }) => url.pathname.startsWith('/api/'),
    new NetworkFirst({
        cacheName: 'api-cache',
        plugins: [
            new ExpirationPlugin({
                maxEntries: 100,
                maxAgeSeconds: 60 * 60 * 24, // 24 hours
            }),
        ],
    })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
    if (event.data && event.data.type === 'SKIP_WAITING') {
        self.skipWaiting();
    }
});

// Detect when the device comes back online and notify the app
self.addEventListener('online', () => {
    self.clients.matchAll().then((clients) => {
        clients.forEach((client) => {
            client.postMessage({
                type: 'ONLINE_STATUS_CHANGE',
                payload: { isOnline: true },
            });
        });
    });
});

self.addEventListener('offline', () => {
    self.clients.matchAll().then((clients) => {
        clients.forEach((client) => {
            client.postMessage({
                type: 'ONLINE_STATUS_CHANGE',
                payload: { isOnline: false },
            });
        });
    });
});
